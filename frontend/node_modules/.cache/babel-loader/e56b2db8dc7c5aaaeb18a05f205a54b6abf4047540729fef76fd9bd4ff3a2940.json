{"ast":null,"code":"// src/image.ts\nimport { mergeAttributes, Node, nodeInputRule } from \"@tiptap/core\";\nvar inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\nvar Image = Node.create({\n  name: \"image\",\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {}\n    };\n  },\n  inline() {\n    return this.options.inline;\n  },\n  group() {\n    return this.options.inline ? \"inline\" : \"block\";\n  },\n  draggable: true,\n  addAttributes() {\n    return {\n      src: {\n        default: null\n      },\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      },\n      width: {\n        default: null\n      },\n      height: {\n        default: null\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: this.options.allowBase64 ? \"img[src]\" : 'img[src]:not([src^=\"data:\"])'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"img\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands() {\n    return {\n      setImage: options => ({\n        commands\n      }) => {\n        return commands.insertContent({\n          type: this.name,\n          attrs: options\n        });\n      }\n    };\n  },\n  addInputRules() {\n    return [nodeInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => {\n        const [,, alt, src, title] = match;\n        return {\n          src,\n          alt,\n          title\n        };\n      }\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Image;\nexport { Image, index_default as default, inputRegex };","map":{"version":3,"names":["mergeAttributes","Node","nodeInputRule","inputRegex","Image","create","name","addOptions","inline","allowBase64","HTMLAttributes","options","group","draggable","addAttributes","src","default","alt","title","width","height","parseHTML","tag","renderHTML","addCommands","setImage","commands","insertContent","type","attrs","addInputRules","find","getAttributes","match","index_default"],"sources":["C:\\Users\\shivn\\OneDrive\\Desktop\\News Mania\\frontend\\node_modules\\@tiptap\\extension-image\\src\\image.ts","C:\\Users\\shivn\\OneDrive\\Desktop\\News Mania\\frontend\\node_modules\\@tiptap\\extension-image\\src\\index.ts"],"sourcesContent":["import { mergeAttributes, Node, nodeInputRule } from '@tiptap/core'\n\nexport interface ImageOptions {\n  /**\n   * Controls if the image node should be inline or not.\n   * @default false\n   * @example true\n   */\n  inline: boolean\n\n  /**\n   * Controls if base64 images are allowed. Enable this if you want to allow\n   * base64 image urls in the `src` attribute.\n   * @default false\n   * @example true\n   */\n  allowBase64: boolean\n\n  /**\n   * HTML attributes to add to the image element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\nexport interface SetImageOptions {\n  src: string\n  alt?: string\n  title?: string\n  width?: number\n  height?: number\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    image: {\n      /**\n       * Add an image\n       * @param options The image attributes\n       * @example\n       * editor\n       *   .commands\n       *   .setImage({ src: 'https://tiptap.dev/logo.png', alt: 'tiptap', title: 'tiptap logo' })\n       */\n      setImage: (options: SetImageOptions) => ReturnType\n    }\n  }\n}\n\n/**\n * Matches an image to a ![image](src \"title\") on input.\n */\nexport const inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/\n\n/**\n * This extension allows you to insert images.\n * @see https://www.tiptap.dev/api/nodes/image\n */\nexport const Image = Node.create<ImageOptions>({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline() {\n    return this.options.inline\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block'\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n      width: {\n        default: null,\n      },\n      height: {\n        default: null,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: this.options.allowBase64 ? 'img[src]' : 'img[src]:not([src^=\"data:\"])',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setImage:\n        options =>\n        ({ commands }) => {\n          return commands.insertContent({\n            type: this.name,\n            attrs: options,\n          })\n        },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => {\n          const [, , alt, src, title] = match\n\n          return { src, alt, title }\n        },\n      }),\n    ]\n  },\n})\n","import { Image } from './image.js'\n\nexport * from './image.js'\n\nexport default Image\n"],"mappings":";AAAA,SAASA,eAAA,EAAiBC,IAAA,EAAMC,aAAA,QAAqB;AAqD9C,IAAMC,UAAA,GAAa;AAMnB,IAAMC,KAAA,GAAQH,IAAA,CAAKI,MAAA,CAAqB;EAC7CC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,MAAA,EAAQ;MACRC,WAAA,EAAa;MACbC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAF,OAAA,EAAS;IACP,OAAO,KAAKG,OAAA,CAAQH,MAAA;EACtB;EAEAI,MAAA,EAAQ;IACN,OAAO,KAAKD,OAAA,CAAQH,MAAA,GAAS,WAAW;EAC1C;EAEAK,SAAA,EAAW;EAEXC,cAAA,EAAgB;IACd,OAAO;MACLC,GAAA,EAAK;QACHC,OAAA,EAAS;MACX;MACAC,GAAA,EAAK;QACHD,OAAA,EAAS;MACX;MACAE,KAAA,EAAO;QACLF,OAAA,EAAS;MACX;MACAG,KAAA,EAAO;QACLH,OAAA,EAAS;MACX;MACAI,MAAA,EAAQ;QACNJ,OAAA,EAAS;MACX;IACF;EACF;EAEAK,UAAA,EAAY;IACV,OAAO,CACL;MACEC,GAAA,EAAK,KAAKX,OAAA,CAAQF,WAAA,GAAc,aAAa;IAC/C,EACF;EACF;EAEAc,WAAW;IAAEb;EAAe,GAAG;IAC7B,OAAO,CAAC,OAAOV,eAAA,CAAgB,KAAKW,OAAA,CAAQD,cAAA,EAAgBA,cAAc,CAAC;EAC7E;EAEAc,YAAA,EAAc;IACZ,OAAO;MACLC,QAAA,EACEd,OAAA,IACA,CAAC;QAAEe;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,aAAA,CAAc;UAC5BC,IAAA,EAAM,KAAKtB,IAAA;UACXuB,KAAA,EAAOlB;QACT,CAAC;MACH;IACJ;EACF;EAEAmB,cAAA,EAAgB;IACd,OAAO,CACL5B,aAAA,CAAc;MACZ6B,IAAA,EAAM5B,UAAA;MACNyB,IAAA,EAAM,KAAKA,IAAA;MACXI,aAAA,EAAeC,KAAA,IAAS;QACtB,MAAM,IAAKhB,GAAA,EAAKF,GAAA,EAAKG,KAAK,IAAIe,KAAA;QAE9B,OAAO;UAAElB,GAAA;UAAKE,GAAA;UAAKC;QAAM;MAC3B;IACF,CAAC,EACH;EACF;AACF,CAAC;;;ACtID,IAAOgB,aAAA,GAAQ9B,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}