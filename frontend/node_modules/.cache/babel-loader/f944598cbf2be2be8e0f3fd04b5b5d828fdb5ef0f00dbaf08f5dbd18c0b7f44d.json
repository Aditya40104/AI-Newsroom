{"ast":null,"code":"// src/highlight.ts\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from \"@tiptap/core\";\nvar inputRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))$/;\nvar pasteRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))/g;\nvar Highlight = Mark.create({\n  name: \"highlight\",\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {}\n    };\n  },\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {};\n    }\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute(\"data-color\") || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {};\n          }\n          return {\n            \"data-color\": attributes.color,\n            style: `background-color: ${attributes.color}; color: inherit`\n          };\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: \"mark\"\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"mark\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setHighlight: attributes => ({\n        commands\n      }) => {\n        return commands.setMark(this.name, attributes);\n      },\n      toggleHighlight: attributes => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name, attributes);\n      },\n      unsetHighlight: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Shift-h\": () => this.editor.commands.toggleHighlight()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Highlight;\nexport { Highlight, index_default as default, inputRegex, pasteRegex };","map":{"version":3,"names":["Mark","markInputRule","markPasteRule","mergeAttributes","inputRegex","pasteRegex","Highlight","create","name","addOptions","multicolor","HTMLAttributes","addAttributes","options","color","default","parseHTML","element","getAttribute","style","backgroundColor","renderHTML","attributes","tag","addCommands","setHighlight","commands","setMark","toggleHighlight","toggleMark","unsetHighlight","unsetMark","addKeyboardShortcuts","Mod-Shift-h","editor","addInputRules","find","type","addPasteRules","index_default"],"sources":["C:\\Users\\shivn\\OneDrive\\Desktop\\News Mania\\frontend\\node_modules\\@tiptap\\extension-highlight\\src\\highlight.ts","C:\\Users\\shivn\\OneDrive\\Desktop\\News Mania\\frontend\\node_modules\\@tiptap\\extension-highlight\\src\\index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface HighlightOptions {\n  /**\n   * Allow multiple highlight colors\n   * @default false\n   * @example true\n   */\n  multicolor: boolean\n\n  /**\n   * HTML attributes to add to the highlight element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    highlight: {\n      /**\n       * Set a highlight mark\n       * @param attributes The highlight attributes\n       * @example editor.commands.setHighlight({ color: 'red' })\n       */\n      setHighlight: (attributes?: { color: string }) => ReturnType\n      /**\n       * Toggle a highlight mark\n       * @param attributes The highlight attributes\n       * @example editor.commands.toggleHighlight({ color: 'red' })\n       */\n      toggleHighlight: (attributes?: { color: string }) => ReturnType\n      /**\n       * Unset a highlight mark\n       * @example editor.commands.unsetHighlight()\n       */\n      unsetHighlight: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a highlight to a ==highlight== on input.\n */\nexport const inputRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))$/\n\n/**\n * Matches a highlight to a ==highlight== on paste.\n */\nexport const pasteRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))/g\n\n/**\n * This extension allows you to highlight text.\n * @see https://www.tiptap.dev/api/marks/highlight\n */\nexport const Highlight = Mark.create<HighlightOptions>({\n  name: 'highlight',\n\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {}\n    }\n\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color') || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {}\n          }\n\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}; color: inherit`,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'mark',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHighlight:\n        attributes =>\n        ({ commands }) => {\n          return commands.setMark(this.name, attributes)\n        },\n      toggleHighlight:\n        attributes =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name, attributes)\n        },\n      unsetHighlight:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Highlight } from './highlight.js'\n\nexport * from './highlight.js'\n\nexport default Highlight\n"],"mappings":";AAAA,SAASA,IAAA,EAAMC,aAAA,EAAeC,aAAA,EAAeC,eAAA,QAAuB;AA6C7D,IAAMC,UAAA,GAAa;AAKnB,IAAMC,UAAA,GAAa;AAMnB,IAAMC,SAAA,GAAYN,IAAA,CAAKO,MAAA,CAAyB;EACrDC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,UAAA,EAAY;MACZC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,cAAA,EAAgB;IACd,IAAI,CAAC,KAAKC,OAAA,CAAQH,UAAA,EAAY;MAC5B,OAAO,CAAC;IACV;IAEA,OAAO;MACLI,KAAA,EAAO;QACLC,OAAA,EAAS;QACTC,SAAA,EAAWC,OAAA,IAAWA,OAAA,CAAQC,YAAA,CAAa,YAAY,KAAKD,OAAA,CAAQE,KAAA,CAAMC,eAAA;QAC1EC,UAAA,EAAYC,UAAA,IAAc;UACxB,IAAI,CAACA,UAAA,CAAWR,KAAA,EAAO;YACrB,OAAO,CAAC;UACV;UAEA,OAAO;YACL,cAAcQ,UAAA,CAAWR,KAAA;YACzBK,KAAA,EAAO,qBAAqBG,UAAA,CAAWR,KAAK;UAC9C;QACF;MACF;IACF;EACF;EAEAE,UAAA,EAAY;IACV,OAAO,CACL;MACEO,GAAA,EAAK;IACP,EACF;EACF;EAEAF,WAAW;IAAEV;EAAe,GAAG;IAC7B,OAAO,CAAC,QAAQR,eAAA,CAAgB,KAAKU,OAAA,CAAQF,cAAA,EAAgBA,cAAc,GAAG,CAAC;EACjF;EAEAa,YAAA,EAAc;IACZ,OAAO;MACLC,YAAA,EACEH,UAAA,IACA,CAAC;QAAEI;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKnB,IAAA,EAAMc,UAAU;MAC/C;MACFM,eAAA,EACEN,UAAA,IACA,CAAC;QAAEI;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKrB,IAAA,EAAMc,UAAU;MAClD;MACFQ,cAAA,EACEA,CAAA,KACA,CAAC;QAAEJ;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASK,SAAA,CAAU,KAAKvB,IAAI;MACrC;IACJ;EACF;EAEAwB,qBAAA,EAAuB;IACrB,OAAO;MACL,eAAeC,CAAA,KAAM,KAAKC,MAAA,CAAOR,QAAA,CAASE,eAAA,CAAgB;IAC5D;EACF;EAEAO,cAAA,EAAgB;IACd,OAAO,CACLlC,aAAA,CAAc;MACZmC,IAAA,EAAMhC,UAAA;MACNiC,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;EAEAC,cAAA,EAAgB;IACd,OAAO,CACLpC,aAAA,CAAc;MACZkC,IAAA,EAAM/B,UAAA;MACNgC,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;AACF,CAAC;;;AC5ID,IAAOE,aAAA,GAAQjC,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}